heat_template_version: "2018-08-31"
description: "Kubeadm Template utilizing the kubadm community image."

#https://docs.openstack.org/heat/stein/template_guide/software_deployment.html#signals-and-wait-conditions
#https://docs.openstack.org/heat/latest/template_guide/hot_spec.html
#https://docs.openstack.org/heat/stein/template_guide/openstack.html#OS::Neutron::LBaaS::LoadBalancer
#TODO Consider https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/#turning-off-auto-approval-of-node-client-certificates or include token/render in template
#TODO dump /etc/kubernetes/admin.conf

#Weirdest error award:
#worker login: [   26.221713] cloud-init[969]: Error: unknown shorthand flag: '��' in -���discovery-token-unsafe-skip-ca-verification  


parameters:
  cluster-cidr:
    default: "10.0.2.0/24"
  cluster-endpoint-ip: #I don't like doing this either but one of our regions doesnt have load balancing yet
    default: "10.0.2.11"
  endpoint:
    default: k8s-lax1.sfxworks.net
  bootstrap-token:
    default: 07401b.f395accd246ae52d # Bootstrap Tokens take the form of abcdef.0123456789abcdef. More formally, they must match the regular expression [a-z0-9]{6}\.[a-z0-9]{16}.
  certificate-key:
    default: e6a2eb8581237ab72a4f494f30285ec12a9694d750b9785706a83bfcbbbd2204
  dns:
    default:
      - "173.231.218.197"
      - "173.231.201.183"
  floating-ip-network:
    default: aaaaa
  router-id:
    default: b5e9a9a5-daa3-49c8-8952-50dd9094b2b2
  os-auth-url:
    default: k8s-lax1.sfxworks.net
  os-acid:
    default: aaa
  os-acs:
    default: aaa
  os-region:
    default: lax1
  zone:
    default: lax1.sfxworks.net #An existing zone to use
  image:
    default: 0ce8697b-332d-451f-9dd2-a6de8c843670
    #==> openstack: Waiting for image HOT_Kubernetes-1.16.2-containerd-1.3.0-runc-1.0.0-rc9 (image id: 0ce8697b-332d-451f-9dd2-a6de8c843670) to become ready...
  


resources:
  k8s_endpoint:
    type: OS::Designate::RecordSet
    properties:
      description: k8s api endpoint
      name: k8s
      records: { get_param: cluster-endpoint-ip }
      ttl: 30
      type: A
      zone: { get_param: zone }

  k8s_net:
    type: OS::Neutron::Net

  k8s_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: k8s_net }
      cidr: "10.0.2.0/24"
      dns_nameservers: { get_param: dns }
      ip_version: 4
  
  k8s_subnet_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_param: router-id }
      subnet: { get_resource: k8s_subnet }

  master_instance_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: k8s_net }
      fixed_ips:
        - subnet_id: { get_resource: k8s_subnet }
        
  master_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 300
  
  wait_handle:
    type: OS::Heat::WaitConditionHandle
  
  master_node1: 
    type: "OS::Nova::Server"
    properties: 
      networks: 
        - port: { get_resource: master_instance_port }
      name: "master-1"
      flavor: "m1.medium"
      image: { get_param: image }
      availability_zone: nova
      key_name: "openstack-ssh"
      image_update_policy: REPLACE
      user_data_update_policy: IGNORE
      user_data_format: RAW
      user_data:
        str_replace:
          template: {get_file: init-master.sh}
          params:
            wc_notify: { get_attr: [wait_handle, curl_cli] }
            
  
  master_condition_worker:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle_worker }
      count: 1
      timeout: 300
  
  wait_handle_worker:
    type: OS::Heat::WaitConditionHandle

  etcd_bucket: 
    type: "OS::Swift::Container"
    properties: 
      PurgeOnDelete: true
      name: "k8s-etcd-backup"
  worker: 
    type: "OS::Nova::Server"
    properties: 
      name: "worker"
      flavor: "m1.small"
      key_name: "openstack-ssh"
      image: "ce464e78-ee1e-44a8-88ad-08a72cdb038f"
      availability_zone: nova
      flavor_update_policy: REPLACE
      image_update_policy: REPLACE
      user_data_format: RAW
      user_data:
        str_replace:
          template: {get_file: join-worker.sh}
          params:
            wc_notify: { get_attr: [wait_handle_worker, curl_cli] }   
      user_data_update_policy: REPLACE
      networks: 
        - network: { get_resource: k8s_net }
    depends_on: 
      - master_node1
      - master_condition

#outputs:
#  wc_kube_config:
#    value:
#      filter:
#      - ['kube-config']
#      - { get_attr: [master_condition, data] }