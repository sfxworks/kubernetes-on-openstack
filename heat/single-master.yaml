heat_template_version: "2018-08-31"
description: "Kubeadm Template utilizing the kubadm community image."

parameters:
  cluster-cidr:
    label: Cluster CIDR
    description: Network range for your master nodes.
    default: "172.16.0.0/24"
    type: string
  endpoint:
    type: string
    label: Kubernetes API Endpoint
    description: The IP or DNS address (recommended) for the API endpoint of your cluster.
  master-flavor:
    type: string
    label: Flavor of masters
    constraints:
    - allowed_values:
      - m1.medium
      - m1.large
      - m1.xlarge
  floating-ip-network:
    label: Floating IP Network
    description: The Floating IP Network ID to be used by the load balancer.
    type: string
  router-id:
    label: Router ID
    description: The router ID to be used by the cluster. Used by kubenet if the cluster is configured to do so.
    type: string
  os-auth-url:
    label: Openstack Identity Endpoint 
    description: The identity endpoint for openstack.
    type: string
  os-acid:
    label: Application Credential ID 
    description: The application credential ID to bse used by the cluster's cloud control manager and sub components
    type: string
    hidden: true
  os-acs:
    label: Application Credential Secret
    description: The application credential secret to bse used by the cluster's cloud control manager and sub components
    type: string
    hidden: true
  os-region:
    label: Region
    description: The region that this cluster should be placed in
    default: lax1
    type: string
    constraints:
    - allowed_values:
      - lax1
      - iad1
  subnet-name:
    label: Subnet Name
    description: The name of the subnet for your cluster.
    default: k8s-internal
    type: string
  image:
    label: HOT Image
    description: The base image to be used by the Heat Orchestration Template.
    default: HOT_Kubernetes-1.16.2-containerd-1.3.0-runc-1.0.0-rc9
    type: string
    constraints:
    - allowed_values:
      - "HOT_Kubernetes-1.16.2-containerd-1.3.0-runc-1.0.0-rc9"
  key-name:
    label: SSH Key
    description: The name of the SSH key to use
    default: workbench
    type: string
  endpoint-ip:
    type: string
    default: "10.1.0.11"
    description: The internal IP address that the endpoint resolves to.
  


resources:  
  sec_rules:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Ruleset for kubeadm. Generic.
      name: k8s-ruleset
      rules:
        - direction: ingress
          port_range_min: 6443
          port_range_max: 6443
          protocol: tcp
          remote_ip_prefix: "0.0.0.0/0"
          remote_mode: remote_ip_prefix
        - direction: ingress
          port_range_min: 30000
          port_range_max: 32767
          protocol: tcp
          remote_ip_prefix: "0.0.0.0/0"
          remote_mode: remote_ip_prefix
        - direction: egress
          port_range_min: 1
          port_range_max: 65535
          protocol: tcp
          remote_ip_prefix: "0.0.0.0/0"
          remote_mode: remote_ip_prefix
        - direction: egress
          port_range_min: 1
          port_range_max: 65535
          protocol: udp
          remote_ip_prefix: "0.0.0.0/0"
          remote_mode: remote_ip_prefix

  sec_rule_self_etcd:
    type: OS::Neutron::SecurityGroupRule
    properties:
      description: etcd
      direction: ingress
      port_range_min: 2379
      port_range_max: 2380
      protocol: tcp
      remote_group: { get_resource: sec_rules}
      security_group: { get_resource: sec_rules}
  
  sec_rule_self_controller:
    type: OS::Neutron::SecurityGroupRule
    properties:
      description: control plane
      direction: ingress
      port_range_min: 10250
      port_range_max: 10252
      protocol: tcp
      remote_group: { get_resource: sec_rules}
      security_group: { get_resource: sec_rules}
  
  sec_rule_self_allow_all_tcp:
    type: OS::Neutron::SecurityGroupRule
    properties:
      description: Allow all communication between self. TCP. Use PSP to isolate workloads.
      direction: ingress
      port_range_min: 1
      port_range_max: 65535
      protocol: tcp
      remote_group: { get_resource: sec_rules}
      security_group: { get_resource: sec_rules}
  sec_rule_self_allow_all_udp:
    type: OS::Neutron::SecurityGroupRule
    properties:
      description: Allow all communication between self. TCP. Use PSP to isolate workloads.
      direction: ingress
      port_range_min: 1
      port_range_max: 65535
      protocol: udp
      remote_group: { get_resource: sec_rules}
      security_group: { get_resource: sec_rules}



  k8s_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: subnet-name }

  k8s_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: k8s_net }
      cidr: { get_param: cluster-cidr }
      dns_nameservers:
        - "1.1.1.1"
        - "1.0.0.1"
      ip_version: 4
      name: { get_param: subnet-name }
  
  k8s_subnet_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_param: router-id }
      subnet: { get_resource: k8s_subnet }
        
  master_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 4
      timeout: 240
  
  wait_handle:
    type: OS::Heat::WaitConditionHandle
    
  master_instance_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: k8s_net }
      security_groups: [{ get_resource: sec_rules }]
      fixed_ips:
      - subnet: { get_resource: k8s_subnet }
        ip_address: { get_param: endpoint-ip}

  master_node: 
    type: "OS::Nova::Server"
    properties: 
      networks: 
        - port: { get_resource: master_instance_port }
      name: "master-1"
      flavor: { get_param: master-flavor }
      block_device_mapping_v2:
      - image: { get_param: image }
        volume_size: 20
        delete_on_termination: false
      availability_zone: nova
      key_name: { get_param: key-name }
      image_update_policy: REPLACE
      user_data_update_policy: IGNORE
      user_data_format: RAW
      tags:
        - Kubernetes
        - master
      user_data:
        str_replace:
          template: {get_file: "https://object.iad1.imhcloud.net/swift/v1/6a1421e443b941039befca0a6f65d108/za-warudo/init-master.sh" }
          params:
            wc_notify: { get_attr: [wait_handle, curl_cli] }
            $ENDPOINT: { get_param: endpoint }
            $CLUSTER_CIDR: { get_param: cluster-cidr }
            $OS_AUTH_URL: { get_param: os-auth-url }
            $OS_APPLICATION_CREDENTIAL_ID: {get_param: os-acid}
            $OS_APPLICATION_CREDENTIAL_SECRET: { get_param: os-acs }
            $OS_REGION_NAME: { get_param: os-region }
            $LB_SUBNET_ID: { get_param: k8s_subnet }
            $LB_FLOATING_NETWORK_ID: { get_param: floating-ip-network }
            $NET_PUBLIC: { get_param: subnet-name }
            $NET_INTERNAL: { get_param: subnet-name }            
  etcd_bucket: 
    type: "OS::Swift::Container"
    properties: 
      PurgeOnDelete: true
      name: "k8s-etcd-backup"

outputs:
  wc_kube_config:
    value: { get_attr: [master_condition, data, config] }
  wc_kube_join:
    value: { get_attr: [master_condition, data, join] }